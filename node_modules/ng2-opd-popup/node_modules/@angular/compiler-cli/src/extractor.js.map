{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler-cli/src/extractor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH;;GAEG;AACH,sEAAsE;AACtE,QAAO,kBAAkB,CAAC,CAAA;AAE1B,IAAY,QAAQ,WAAM,mBAAmB,CAAC,CAAA;AAI9C,wBAAiC,WAAW,CAAC,CAAA;AAC7C,8BAAwD,iBAAiB,CAAC,CAAA;AAE1E;IACE,mBACY,WAA+B,EAAU,cAA4B,EACrE,OAAmB;QADnB,gBAAW,GAAX,WAAW,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAc;QACrE,YAAO,GAAP,OAAO,CAAY;IAAG,CAAC;IAEnC,2BAAO,GAAP;QAAA,iBAGC;QAFC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,CAC7D,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC,QAAQ,CAAC,EAArD,CAAqD,CAAC,CAAC,CAAC;IACpE,CAAC;IAEM,gBAAM,GAAb,UACI,OAAmC,EAAE,kBAA0B,EAAE,OAAmB,EACpF,kBAA2C,EAAE,cAA6B;QAC5E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC;YAClB,cAAc;gBACV,IAAI,4BAAY,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,2CAA2B,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACvF,oIAAsB,CAC0C;QACvE,MAAM,CAAC,IAAI,SAAS,CAAC,WAAW,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAC;IACH,gBAAC;AAAD,CAAC,AApBD,IAoBC;AApBY,iBAAS,YAoBrB,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\n// Must be imported first, because angular2 decorators throws on load.\nimport 'reflect-metadata';\n\nimport * as compiler from '@angular/compiler';\nimport * as tsc from '@angular/tsc-wrapped';\nimport * as ts from 'typescript';\n\nimport {excludeFilePattern} from './codegen';\nimport {CompilerHost, ModuleResolutionHostAdapter} from './compiler_host';\n\nexport class Extractor {\n  constructor(\n      private ngExtractor: compiler.Extractor, private ngCompilerHost: CompilerHost,\n      private program: ts.Program) {}\n\n  extract(): Promise<compiler.MessageBundle> {\n    return this.ngExtractor.extract(this.program.getSourceFiles().map(\n        sf => this.ngCompilerHost.getCanonicalFileName(sf.fileName)));\n  }\n\n  static create(\n      options: tsc.AngularCompilerOptions, translationsFormat: string, program: ts.Program,\n      moduleResolverHost: ts.ModuleResolutionHost, ngCompilerHost?: CompilerHost): Extractor {\n    if (!ngCompilerHost)\n      ngCompilerHost =\n          new CompilerHost(program, options, new ModuleResolutionHostAdapter(moduleResolverHost));\n    const {extractor: ngExtractor} = compiler.Extractor.create(\n        ngCompilerHost, {excludeFilePattern: excludeFilePattern(options)});\n    return new Extractor(ngExtractor, ngCompilerHost, program);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}