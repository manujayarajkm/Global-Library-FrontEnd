{"version":3,"sources":["../../.tmp/bs-moment/format-functions.ts"],"names":[],"mappings":"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","file":"format-functions.js","sourceRoot":"","sourcesContent":["import { Locale } from './locale/locale.class';\nimport { zeroFill } from './utils';\nimport { isFunction } from './utils/type-checks';\nimport { DateFormatterFn } from './types';\n\nexport let formatFunctions: {\n  [key: string]: (date: Date, locale: Locale) => string;\n} = {};\nexport let formatTokenFunctions: { [key: string]: DateFormatterFn } = {};\n\n// tslint:disable-next-line\nexport const formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n// token:    'M'\n// padded:   ['MM', 2]\n// ordinal:  'Mo'\n// callback: function () { this.month() + 1 }\nexport function addFormatToken(\n  token: string,\n  padded: { [key: number]: any },\n  ordinal: string,\n  callback: DateFormatterFn\n): void {\n  const func: DateFormatterFn = callback;\n  if (token) {\n    formatTokenFunctions[token] = func;\n  }\n  if (padded as { [key: number]: any }) {\n    const key = padded[0] as string;\n    formatTokenFunctions[key] = function(\n      date: Date,\n      format: string,\n      locale?: Locale\n    ): string {\n      return zeroFill(\n        func.apply(null, arguments),\n        padded[1] as number,\n        padded[2] as boolean\n      );\n    };\n  }\n  if (ordinal) {\n    formatTokenFunctions[ordinal] = function(\n      date: Date,\n      format: string,\n      locale: Locale\n    ): string {\n      // todo: fix this\n      return locale.ordinal(func.apply(null, arguments), token);\n    };\n  }\n}\n\nexport function makeFormatFunction(\n  format: string\n): (date: Date, locale: Locale) => string {\n  const array: string[] = format.match(formattingTokens);\n  const length = array.length;\n  const formatArr: string[] | DateFormatterFn[] = new Array(length);\n  for (let i = 0; i < length; i++) {\n    formatArr[i] = formatTokenFunctions[array[i]]\n      ? formatTokenFunctions[array[i]]\n      : removeFormattingTokens(array[i]);\n  }\n\n  return function(date: Date, locale: Locale): string {\n    let output = '';\n    for (let j = 0; j < length; j++) {\n      output += isFunction(formatArr[j] as DateFormatterFn)\n        ? (formatArr[j] as DateFormatterFn).call(null, date, format, locale)\n        : formatArr[j];\n    }\n\n    return output;\n  };\n}\n\nfunction removeFormattingTokens(input: string): string {\n  if (input.match(/\\[[\\s\\S]/)) {\n    return input.replace(/^\\[|\\]$/g, '');\n  }\n\n  return input.replace(/\\\\/g, '');\n}\n"]}