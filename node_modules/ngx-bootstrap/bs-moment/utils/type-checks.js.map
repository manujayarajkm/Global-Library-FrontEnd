{"version":3,"sources":["../../../.tmp/bs-moment/utils/type-checks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,MAAM,sBAAsB,IAAU;IACpC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxC,CAAC;AACD,MAAM,qBAAqB,EAAY;IACrC,MAAM,CAAC,CACL,EAAE,YAAY,QAAQ;QACtB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,mBAAmB,CAC3D,CAAC;AACJ,CAAC;AAED,MAAM,kBAAkB,KAAU;IAChC,MAAM,CAAC,CACL,KAAK,YAAY,KAAK;QACtB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,gBAAgB,CAC3D,CAAC;AACJ,CAAC;AAED,MAAM,qBAAqB,CAAM,CAAC,UAAU,EAAE,CAAkB;IAC9D,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,mBAAmB,KAAU,CAAC,UAAU;IAC5C,+DAA+D;IAC/D,gBAAgB;IAChB,MAAM,CAAC,CACL,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAC7E,CAAC;AACJ,CAAC;AAED,MAAM,sBAAsB,KAAU;IACpC,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,gBAAgB,mBAAoC;IACxD,IAAM,aAAa,GAAG,CAAC,mBAAmB,CAAC;IAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,EAAE,CAAC,CAAC,aAAa,KAAK,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnD,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC","file":"type-checks.js","sourceRoot":"","sourcesContent":["import { absFloor } from '../utils';\n\nexport function isDateValid(date: Date): boolean {\n  return date && !isNaN(date.getTime());\n}\nexport function isFunction(fn: Function): fn is Function {\n  return (\n    fn instanceof Function ||\n    Object.prototype.toString.call(fn) === '[object Function]'\n  );\n}\n\nexport function isArray(input: any): boolean {\n  return (\n    input instanceof Array ||\n    Object.prototype.toString.call(input) === '[object Array]'\n  );\n}\n\nexport function hasOwnProp(a: any /*object*/, b: string | number): boolean {\n  return Object.prototype.hasOwnProperty.call(a, b);\n}\n\nexport function isObject(input: any /*object*/): boolean {\n  // IE8 will treat undefined and null as object if it wasn't for\n  // input != null\n  return (\n    input != null && Object.prototype.toString.call(input) === '[object Object]'\n  );\n}\n\nexport function isUndefined(input: any): boolean {\n  return input === void 0;\n}\n\nexport function toInt(argumentForCoercion: string | number): number {\n  const coercedNumber = +argumentForCoercion;\n  let value = 0;\n\n  if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n    value = absFloor(coercedNumber);\n  }\n\n  return value;\n}\n"]}