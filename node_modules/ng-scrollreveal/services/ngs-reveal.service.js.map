{"version":3,"file":"ngs-reveal.service.js","sourceRoot":"","sources":["../../services/ngs-reveal.service.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAc,MAAM,eAAe;OAC/C,EAAE,eAAe,EAAE,MAAM,qBAAqB;OAC9C,EAAE,aAAa,EAAE,MAAM,kBAAkB;AAUhD;;;;GAIG;AAEH;IAUE,0BAAoB,MAAuB,EAAU,aAA4B;QAA7D,WAAM,GAAN,MAAM,CAAiB;QAAU,kBAAa,GAAb,aAAa,CAAe;QAC/E,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC;QAEzC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,qDAAqD;YACrD,IAAI,QAAQ,GAA2C,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;YACvF,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,iCAAM,GAAN,UAAO,UAAsB,EAAE,MAAwB;QACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,aAAa;YAC7B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,oCAAS,GAAT,UAAU,gBAA4B,EAAE,QAAgB,EAAE,QAAiB,EAAE,MAAwB;QACnG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC,aAAa;YACnC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,+BAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAEI,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,+BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,eAAe,GAAG;QACzB,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,CAAC;IACF,uBAAC;AAAD,CAAC,AAjED,IAiEC","sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `scrollreveal` property.\n */\nexport interface NgsHasScrollreveal {\n  scrollReveal: scrollReveal.ScrollRevealObject;\n}\n\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\n\nexport class NgsRevealService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the scrollreveal.js library\n  private sr: scrollReveal.ScrollRevealObject;\n\n  // Window Object\n  private window: Window & NgsHasScrollreveal;\n\n\n  constructor(private config: NgsRevealConfig, private windowService: WindowService) {\n    this.window = windowService.nativeWindow;\n\n    if (this.window) {// universal support\n      // init the scrollReveal library with injected config\n      let srConfig: scrollReveal.ScrollRevealObjectOptions = Object.assign({}, config || {});\n      this.sr = ScrollReveal(srConfig);\n    }\n  }\n\n  /**\n   * Method to reveal a single DOM element.\n   * @param elementRef  a reference to the element to reveal\n   * @param config      (optional) custom configuration to use when revealing this element\n   */\n  reveal(elementRef: ElementRef, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return elementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(elementRef.nativeElement, config) : this.sr;\n  }\n\n  /**\n   * Method to reveal a set of DOM elements.\n   * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n   * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n   * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n   * @param config            (optional) custom configuration to use when revealing this set of elements\n   */\n  revealSet(parentElementRef: ElementRef, selector: string, interval?: number, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return parentElementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(selector, config, interval) : this.sr;\n  }\n\n  /**\n   * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n   */\n  sync(): void {\n    if (this.window) {// universal support\n      this.sr.sync();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgsRevealConfig, },\n{type: WindowService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}