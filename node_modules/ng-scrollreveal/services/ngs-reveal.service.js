import { Injectable } from '@angular/core';
import { NgsRevealConfig } from './ngs-reveal-config';
import { WindowService } from './window.service';
/**
 * Service to inject in directives to use ScrollReveal JS.
 * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).
 * If not possible, most methods simply do nothing, as DOM elements are not available anyway.
 */
export var NgsRevealService = (function () {
    function NgsRevealService(config, windowService) {
        this.config = config;
        this.windowService = windowService;
        this.window = windowService.nativeWindow;
        if (this.window) {
            // init the scrollReveal library with injected config
            var srConfig = Object.assign({}, config || {});
            this.sr = ScrollReveal(srConfig);
        }
    }
    /**
     * Method to reveal a single DOM element.
     * @param elementRef  a reference to the element to reveal
     * @param config      (optional) custom configuration to use when revealing this element
     */
    NgsRevealService.prototype.reveal = function (elementRef, config) {
        if (!this.window) {
            return null;
        }
        return elementRef.nativeElement ?
            this.sr.reveal(elementRef.nativeElement, config) : this.sr;
    };
    /**
     * Method to reveal a set of DOM elements.
     * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal
     * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal
     * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially
     * @param config            (optional) custom configuration to use when revealing this set of elements
     */
    NgsRevealService.prototype.revealSet = function (parentElementRef, selector, interval, config) {
        if (!this.window) {
            return null;
        }
        return parentElementRef.nativeElement ?
            this.sr.reveal(selector, config, interval) : this.sr;
    };
    /**
     * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .
     */
    NgsRevealService.prototype.sync = function () {
        if (this.window) {
            this.sr.sync();
        }
    };
    NgsRevealService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgsRevealService.ctorParameters = [
        { type: NgsRevealConfig, },
        { type: WindowService, },
    ];
    return NgsRevealService;
}());
//# sourceMappingURL=ngs-reveal.service.js.map