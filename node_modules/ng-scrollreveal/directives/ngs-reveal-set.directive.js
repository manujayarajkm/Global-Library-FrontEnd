var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Directive, ElementRef, Input } from '@angular/core';
import { NgsRevealService } from '../services/ngs-reveal.service';
import { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';
/**
 * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.
 * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.
 * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).
 * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.
 *
 */
export var NgsRevealSetDirective = (function (_super) {
    __extends(NgsRevealSetDirective, _super);
    function NgsRevealSetDirective(elementRef, ngsRevealService) {
        _super.call(this, ngsRevealService);
        this.elementRef = elementRef;
    }
    Object.defineProperty(NgsRevealSetDirective.prototype, "_config", {
        /**
         * Custom configuration to use when revealing this set of elements
         */
        set: function (value) {
            this._initConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    NgsRevealSetDirective.prototype.ngOnInit = function () {
        if (!this.ngsSelector && console) {
            var item = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';
            console.error("[ng-scrollreveal] You must set \"[ngsSelector]\" attribute on item '" + item + "' when using \"ngsRevealSet\"");
            return;
        }
        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);
    };
    NgsRevealSetDirective.prototype.ngOnChanges = function (changes) {
        var ngsSyncProp = 'ngsSync';
        if (ngsSyncProp in changes
            && !changes[ngsSyncProp].isFirstChange()
            && !changes[ngsSyncProp].currentValue()) {
            this.ngsRevealService.sync();
        }
    };
    NgsRevealSetDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngsRevealSet]'
                },] },
    ];
    /** @nocollapse */
    NgsRevealSetDirective.ctorParameters = [
        { type: ElementRef, },
        { type: NgsRevealService, },
    ];
    NgsRevealSetDirective.propDecorators = {
        '_config': [{ type: Input, args: ['ngsRevealSet',] },],
        'ngsSelector': [{ type: Input },],
        'ngsInterval': [{ type: Input },],
        'ngsSync': [{ type: Input },],
    };
    return NgsRevealSetDirective;
}(AbstractNgsRevealDirective));
//# sourceMappingURL=ngs-reveal-set.directive.js.map