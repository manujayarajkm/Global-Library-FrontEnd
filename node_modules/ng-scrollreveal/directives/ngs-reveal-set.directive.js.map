{"version":3,"file":"ngs-reveal-set.directive.js","sourceRoot":"","sources":["../../directives/ngs-reveal-set.directive.ts"],"names":[],"mappings":";;;;;OAAO,EAAE,SAAS,EAAmC,UAAU,EAAE,KAAK,EAAE,MAAM,eAAe;OAEtF,EAAE,gBAAgB,EAAE,MAAM,gCAAgC;OAC1D,EAAE,0BAA0B,EAAE,MAAM,+BAA+B;AAG1E;;;;;;GAMG;AAEH;IAA2C,yCAA0B;IA4BjE,+BAAoB,UAAsB,EAAE,gBAAkC;QAC1E,kBAAM,gBAAgB,CAAC,CAAC;QADR,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAxBD,sBAAI,0CAAO;QAJX;;WAEG;aAEH,UAAY,KAA+B;YACvC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAwBD,wCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,CAAC,CAAC;YAC/B,IAAI,IAAI,GAAW,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;YAChG,OAAO,CAAC,KAAK,CAAC,yEAAqE,IAAI,kCAA6B,CAAC,CAAC;YACtH,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtG,CAAC;IAED,2CAAW,GAAX,UAAY,OAAiD;QAEzD,IAAI,WAAW,GAAG,SAAS,CAAC;QAC5B,EAAE,CAAC,CAAC,WAAW,IAAI,OAAO;eACnB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,aAAa,EAAE;eACrC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;IACL,CAAC;IACE,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,gBAAgB;iBAC7B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,oCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,gBAAgB,GAAG;KACzB,CAAC;IACK,oCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;QACvD,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC5B,CAAC;IACF,4BAAC;AAAD,CAAC,AAlED,CAA2C,0BAA0B,GAkEpE","sourcesContent":["import { Directive, OnInit, OnChanges, SimpleChange, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\n\nexport class NgsRevealSetDirective extends AbstractNgsRevealDirective implements OnInit, OnChanges {\n\n    /**\n     * Custom configuration to use when revealing this set of elements\n     */\n    \n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    /**\n     * CSS selector to identify child elements to reveal\n     */\n    \n    ngsSelector: string;\n\n    /**\n     * Sequence interval (in milliseconds) to the reveal child elements sequentially\n     */\n    \n    ngsInterval: number;\n\n    /**\n     * Boolean indicating when the set should be synced, to reveal asynchronously added child elements\n     */\n    \n    ngsSync: boolean;\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        if (!this.ngsSelector && console) {\n            let item: string = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(`[ng-scrollreveal] You must set \"[ngsSelector]\" attribute on item '${item}' when using \"ngsRevealSet\"`);\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    }\n\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n\n        let ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngsRevealSet]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: NgsRevealService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_config': [{ type: Input, args: ['ngsRevealSet', ] },],\n'ngsSelector': [{ type: Input },],\n'ngsInterval': [{ type: Input },],\n'ngsSync': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}