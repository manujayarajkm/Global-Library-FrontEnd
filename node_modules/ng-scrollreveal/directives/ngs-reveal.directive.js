var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Directive, HostBinding, ElementRef, Input } from '@angular/core';
import { NgsRevealService } from '../services/ngs-reveal.service';
import { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';
/**
 * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.
 */
export var NgsRevealDirective = (function (_super) {
    __extends(NgsRevealDirective, _super);
    function NgsRevealDirective(elementRef, ngsRevealService) {
        _super.call(this, ngsRevealService);
        this.elementRef = elementRef;
        this.visibility = 'hidden';
    }
    Object.defineProperty(NgsRevealDirective.prototype, "_config", {
        /**
         * Custom configuration to use when revealing this element
         */
        set: function (value) {
            this._initConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    NgsRevealDirective.prototype.ngOnInit = function () {
        this.ngsRevealService.reveal(this.elementRef, this.config);
    };
    NgsRevealDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngsReveal]'
                },] },
    ];
    /** @nocollapse */
    NgsRevealDirective.ctorParameters = [
        { type: ElementRef, },
        { type: NgsRevealService, },
    ];
    NgsRevealDirective.propDecorators = {
        'visibility': [{ type: HostBinding, args: ['style.visibility',] },],
        '_config': [{ type: Input, args: ['ngsReveal',] },],
    };
    return NgsRevealDirective;
}(AbstractNgsRevealDirective));
//# sourceMappingURL=ngs-reveal.directive.js.map