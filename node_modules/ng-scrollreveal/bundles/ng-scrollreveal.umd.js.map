{"version":3,"file":"ng-scrollreveal.umd.js","sources":["../../tmp/services/ngs-reveal-config.ts","../../tmp/services/window.service.ts","../../tmp/services/ngs-reveal.service.ts","../../tmp/directives/ngs-reveal-common.directive.ts","../../tmp/directives/ngs-reveal.directive.ts","../../tmp/directives/ngs-reveal-set.directive.ts","../../tmp/ngs-reveal.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the NgScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\n\nexport class NgsRevealConfig {\n    // 'bottom', 'left', 'top', 'right'\n    origin?: 'bottom' | 'left' | 'top' | 'right' = 'bottom';\n\n    // Can be any valid CSS distance, e.g. '5rem', '10%', '20vw', etc.\n    distance?= '20px';\n\n    // Time in milliseconds.\n    duration?= 500;\n    delay?= 0;\n\n    // Starting angles in degrees, will transition from these values to 0 in all axes.\n    rotate?= { x: 0, y: 0, z: 0 };\n\n    // Starting opacity value, before transitioning to the computed opacity.\n    opacity?= 0;\n\n    // Starting scale value, will transition from this value to 1\n    scale?= 0.9;\n\n    // Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n    easing?= 'cubic-bezier(0.6, 0.2, 0.1, 1)';\n\n    // `<html>` is the default reveal container. You can pass either:\n    // DOM Node, e.g. document.querySelector('.fooContainer')\n    // Selector, e.g. '.fooContainer'\n    container?: Element | string;\n\n    // true/false to control reveal animations on mobile.\n    mobile?= true;\n\n    // true:  reveals occur every time elements become visible\n    // false: reveals occur once as elements become visible\n    reset?= false;\n\n    // 'always' — delay for all reveal animations\n    // 'once'   — delay only the first time reveals occur\n    // 'onload' - delay only for animations triggered by first load\n    useDelay?: 'always' | 'once' | 'onload' = 'always';\n\n    // Change when an element is considered in the viewport. The default value\n    // of 0.20 means 20% of an element must be visible for its reveal to occur.\n    viewFactor?= 0.2;\n\n    // Pixel values that alter the container boundaries.\n    // e.g. Set `{ top: 48 }`, if you have a 48px tall fixed toolbar.\n    // --\n    // Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n    viewOffset?= { top: 0, right: 0, bottom: 0, left: 0 };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n\nexport class WindowService {\n\n  get nativeWindow(): any {\n    return _window();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\nfunction _window(): any {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ElementRef } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `scrollreveal` property.\n */\nexport interface NgsHasScrollreveal {\n  scrollReveal: scrollReveal.ScrollRevealObject;\n}\n\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\n\nexport class NgsRevealService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the scrollreveal.js library\n  private sr: scrollReveal.ScrollRevealObject;\n\n  // Window Object\n  private window: Window & NgsHasScrollreveal;\n\n\n  constructor(private config: NgsRevealConfig, private windowService: WindowService) {\n    this.window = windowService.nativeWindow;\n\n    if (this.window) {// universal support\n      // init the scrollReveal library with injected config\n      let srConfig: scrollReveal.ScrollRevealObjectOptions = Object.assign({}, config || {});\n      this.sr = ScrollReveal(srConfig);\n    }\n  }\n\n  /**\n   * Method to reveal a single DOM element.\n   * @param elementRef  a reference to the element to reveal\n   * @param config      (optional) custom configuration to use when revealing this element\n   */\n  reveal(elementRef: ElementRef, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return elementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(elementRef.nativeElement, config) : this.sr;\n  }\n\n  /**\n   * Method to reveal a set of DOM elements.\n   * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n   * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n   * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n   * @param config            (optional) custom configuration to use when revealing this set of elements\n   */\n  revealSet(parentElementRef: ElementRef, selector: string, interval?: number, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return parentElementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(selector, config, interval) : this.sr;\n  }\n\n  /**\n   * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n   */\n  sync(): void {\n    if (this.window) {// universal support\n      this.sr.sync();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgsRevealConfig, },\n{type: WindowService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\n\n/**\n * Base directive class shared by the concrete ScrollReveal directives.\n */\nexport abstract class AbstractNgsRevealDirective {\n\n    config: NgsRevealConfig;\n\n    constructor(protected ngsRevealService: NgsRevealService) { }\n\n    protected _initConfig(value: string | NgsRevealConfig): void {\n        if (value && typeof value === 'string') {\n            this.config = JSON.parse(value);\n        } else if (value && typeof value === 'object') {\n            this.config = value;\n        }\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, HostBinding, OnInit, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.\n */\n\nexport class NgsRevealDirective extends AbstractNgsRevealDirective implements OnInit {\n\n    \n    visibility = 'hidden';\n\n    /**\n     * Custom configuration to use when revealing this element\n     */\n    \n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        this.ngsRevealService.reveal(this.elementRef, this.config);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngsReveal]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: NgsRevealService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'visibility': [{ type: HostBinding, args: ['style.visibility', ] },],\n'_config': [{ type: Input, args: ['ngsReveal', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, OnInit, OnChanges, SimpleChange, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\n\nexport class NgsRevealSetDirective extends AbstractNgsRevealDirective implements OnInit, OnChanges {\n\n    /**\n     * Custom configuration to use when revealing this set of elements\n     */\n    \n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    /**\n     * CSS selector to identify child elements to reveal\n     */\n    \n    ngsSelector: string;\n\n    /**\n     * Sequence interval (in milliseconds) to the reveal child elements sequentially\n     */\n    \n    ngsInterval: number;\n\n    /**\n     * Boolean indicating when the set should be synced, to reveal asynchronously added child elements\n     */\n    \n    ngsSync: boolean;\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        if (!this.ngsSelector && console) {\n            let item: string = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(`[ng-scrollreveal] You must set \"[ngsSelector]\" attribute on item '${item}' when using \"ngsRevealSet\"`);\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    }\n\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n\n        let ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngsRevealSet]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: NgsRevealService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_config': [{ type: Input, args: ['ngsRevealSet', ] },],\n'ngsSelector': [{ type: Input },],\n'ngsInterval': [{ type: Input },],\n'ngsSync': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\nimport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\nexport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\n\nexport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\n/**\n * Main module of the library\n */\n\nexport class NgsRevealModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgsRevealModule,\n      providers: [WindowService, NgsRevealService, NgsRevealConfig]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [NgsRevealDirective, NgsRevealSetDirective],\n  declarations: [NgsRevealDirective, NgsRevealSetDirective]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Injectable","Directive","ElementRef","HostBinding","Input","__extends","NgModule","CommonModule"],"mappings":"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"}